[
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L2_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L2_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L2_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_Table",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "isExtraImport": true,
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "ckeditor.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authenticationApp.models",
        "description": "authenticationApp.models",
        "isExtraImport": true,
        "detail": "authenticationApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authenticationApp.models",
        "description": "authenticationApp.models",
        "isExtraImport": true,
        "detail": "authenticationApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authenticationApp.models",
        "description": "authenticationApp.models",
        "isExtraImport": true,
        "detail": "authenticationApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authenticationApp.models",
        "description": "authenticationApp.models",
        "isExtraImport": true,
        "detail": "authenticationApp.models",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L1_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L2_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L3_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "isExtraImport": true,
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Cast",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Cast",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "ExpenseTable",
        "importPath": "expenseApp.models",
        "description": "expenseApp.models",
        "isExtraImport": true,
        "detail": "expenseApp.models",
        "documentation": {}
    },
    {
        "label": "StoreTable",
        "importPath": "storeApp.models",
        "description": "storeApp.models",
        "isExtraImport": true,
        "detail": "storeApp.models",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "InvalidOperation",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "MainContract",
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "isExtraImport": true,
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractDetail",
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "isExtraImport": true,
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContract",
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "isExtraImport": true,
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContract",
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "isExtraImport": true,
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractDetail",
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "isExtraImport": true,
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objs",
        "description": "plotly.graph_objs",
        "detail": "plotly.graph_objs",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "assembliesApp.migrations.0001_initial",
        "description": "assembliesApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Assemblies_Code_L1_Table',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Assemblies_Code_L1', models.CharField(blank=True, max_length=255, null=True)),",
        "detail": "assembliesApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "assembliesApp.migrations.0002_initial",
        "description": "assembliesApp.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('assembliesApp', '0001_initial'),\n        ('companyApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='assemblies_code_l1_table',\n            name='Company_Details',",
        "detail": "assembliesApp.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "AssembliesappConfig",
        "kind": 6,
        "importPath": "assembliesApp.apps",
        "description": "assembliesApp.apps",
        "peekOfCode": "class AssembliesappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'assembliesApp'",
        "detail": "assembliesApp.apps",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L1_Table",
        "kind": 6,
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "peekOfCode": "class Assemblies_Code_L1_Table(models.Model):\n    class Meta:\n        verbose_name = \"Assemblies Code Level 1\"\n        verbose_name_plural = \"Assemblies Codes Level 1\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L1 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_assemblies_level_2_list(self):\n        return Assemblies_Code_L2_Table.objects.filter(Assemblies_Code_L1=self)",
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L2_Table",
        "kind": 6,
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "peekOfCode": "class Assemblies_Code_L2_Table(models.Model):\n    class Meta:\n        verbose_name = \"Assemblies Code Level 2\"\n        verbose_name_plural = \"Assemblies Codes Level 2\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L1 = models.ForeignKey(Assemblies_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L2 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_assemblies_level_3_list(self):",
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L3_Table",
        "kind": 6,
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "peekOfCode": "class Assemblies_Code_L3_Table(models.Model):\n    class Meta:\n        verbose_name = \"Assemblies Code Level 3\"\n        verbose_name_plural = \"Assemblies Codes Level 3\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L1 = models.ForeignKey(Assemblies_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L2 = models.ForeignKey(Assemblies_Code_L2_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L3 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Table",
        "kind": 6,
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "peekOfCode": "class Estimation_Assemblies_Table(models.Model):\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Assembly_Code = models.CharField(max_length=255, unique=True, default=uuid.uuid4, editable=False)\n    Assembly_Title = models.CharField(max_length=255, null=True, blank=True)\n    Assembly_Name = models.CharField(max_length=255, null=True, blank=True)\n    Assemblies_Code_L1 = models.ForeignKey(Assemblies_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L2 = models.ForeignKey(Assemblies_Code_L2_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Assemblies_Code_L3 = models.ForeignKey(Assemblies_Code_L3_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Unit_of_Measure = models.CharField(max_length=255, null=True, blank=True)\n    Assembly_Quantity = models.CharField(max_length=255, null=True, blank=True, default=\"1\")",
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "Estimation_Assemblies_Resource_Details_Table",
        "kind": 6,
        "importPath": "assembliesApp.models",
        "description": "assembliesApp.models",
        "peekOfCode": "class Estimation_Assemblies_Resource_Details_Table(models.Model):\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Estimation_Assemblies = models.ForeignKey(Estimation_Assemblies_Table, on_delete=models.CASCADE, null=True, blank=True, related_name=\"estimation_assemblies_resourcedetailstable\")\n    Resource_record = models.ForeignKey(CompanyResourcesTable, on_delete=models.CASCADE, max_length=255, null=True, blank=True)\n    Resource_Budget_Unit_Cost = models.CharField(max_length=255, null=True, blank=True, default=\"\")\n    Resource_Quantity = models.CharField(max_length=255, null=True, blank=True, default=\"\")\n    Assembly_Quantity = models.CharField(max_length=255, null=True, blank=True, default=\"\")\n    Quantity = models.CharField(max_length=255, null=True, blank=True, default=\"\")\n    Unit_of_Measure = models.CharField(max_length=255, null=True, blank=True)\n    Unit_Cost = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "assembliesApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "assembliesApp.urls",
        "description": "assembliesApp.urls",
        "peekOfCode": "urlpatterns = [\n    path('estimate-assemblies/', views.estimate_assemblies, name=\"estimate_assemblies\"),\n    path('company_assembly_record', views.company_assembly_record, name=\"company_assembly_record\"),\n    path('save_edit_company_assembly_record', views.save_edit_company_assembly_record, name=\"save_edit_company_assembly_record\"),\n    path('assemblies_list', views.assemblies_list, name=\"assemblies_list\"),\n    path('edit_assembly/<int:pk>/', views.edit_assembly, name=\"edit_assembly\"),\n    path('assemblies_Delete/<int:pk>/', views.assemblies_Delete, name=\"assemblies_Delete\"),\n    path('duplicate_assembly/<int:assembly_id>/', views.duplicate_assembly, name='duplicate_assembly'),\n    path('delete-resource/', views.delete_resource, name='delete_resource'),\n    path('Assemblies_Code_L1_module/', views.Assemblies_Code_L1_module, name=\"Assemblies_Code_L1_module\"),",
        "detail": "assembliesApp.urls",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "class DateTimeEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\nimport json\nfrom datetime import datetime\nfrom django.contrib.auth.decorators import login_required\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.shortcuts import render",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "class DateTimeEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n@login_required\ndef estimate_assemblies(request):\n    try:\n        # Retrieve the latest company details for the user\n        company_details_record = request.user.company_details",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "estimate_assemblies",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def estimate_assemblies(request):\n    try:\n        # Retrieve the latest company details for the user\n        company_details_record = request.user.company_details\n        if not company_details_record:\n            # Handle case where no company details are found\n            messages.error(request, \"please setup your company first\")\n            return redirect(\"company_settings\")\n            # return render(\n            #     request,",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "company_assembly_record",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def company_assembly_record(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        list_resourses_ids_json = request.POST.get(\"list_resourses_ids\")\n        try:\n            # Parse the JSON data\n            list_resourses_ids = json.loads(list_resourses_ids_json)\n        except json.JSONDecodeError:\n            list_resourses_ids = []\n        print(list_resourses_ids)",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "duplicate_assembly",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def duplicate_assembly(request, assembly_id):\n    # Fetch the existing assembly record\n    original_assembly = get_object_or_404(Estimation_Assemblies_Table, id=assembly_id)\n    # Create a new assembly record with \"Duplicate\" appended to the name\n    new_assembly = Estimation_Assemblies_Table(\n        Company_Details=original_assembly.Company_Details,\n        Assembly_Name=f\"{original_assembly.Assembly_Name} - Duplicate\",\n        Assemblies_Code_L1=original_assembly.Assemblies_Code_L1,\n        Assemblies_Code_L2=original_assembly.Assemblies_Code_L2,\n        Assemblies_Code_L3=original_assembly.Assemblies_Code_L3,",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "save_edit_company_assembly_record",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def save_edit_company_assembly_record(request):\n    get_assembly_record_id = request.POST.get(\"get_assembly_record_id\")\n    company_details_record = request.user.company_details\n    assembly = get_object_or_404(\n        Estimation_Assemblies_Table,\n        id=get_assembly_record_id,\n        Company_Details=company_details_record,\n    )\n    if request.method == \"POST\":\n        # Parse the JSON data for resources",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "assemblies_list",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def assemblies_list(request):\n    company_details_record = request.user.company_details\n    filter_Estimation_Assemblies = Estimation_Assemblies_Table.objects.filter(\n        Company_Details=company_details_record\n    )\n    context = {\"filter_Estimation_Assemblies\": filter_Estimation_Assemblies}\n    return render(request, \"assembliesApp/assemblies_list.html\", context)\n@login_required\ndef edit_assembly(request, pk):\n    try:",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "edit_assembly",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def edit_assembly(request, pk):\n    try:\n        # Retrieve the latest company details for the user\n        company_details_record = request.user.company_details\n        if not company_details_record:\n            # Handle case where no company details are found\n            return render(\n                request,\n                \"assembliesApp/error.html\",\n                {\"message\": \"No company details found for the user.\"},",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "assemblies_Delete",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def assemblies_Delete(request, pk):\n    try:\n        get_assembly = Estimation_Assemblies_Table.objects.get(id=pk).delete()\n        messages.success(request, \"Assembly Deleted Successfully!\")\n        return redirect(\"assemblies_list\")\n    except Exception as exc:\n        messages.success(request, f\"{exc}\")\n        return redirect(\"assemblies_list\")\ndef delete_resource(request):\n    if request.method == \"POST\":",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "delete_resource",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def delete_resource(request):\n    if request.method == \"POST\":\n        print(\"sohel\")\n        try:\n            data = json.loads(request.body)\n            resource_id = data.get(\"resource_id\")\n            print(\"resource_idresource_id\")\n            print(data)\n            print(resource_id)\n            Estimation_Assemblies_Resource_Details_Table.objects.get(",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L1_module",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def Assemblies_Code_L1_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Assemblies_Code_L1 = request.POST.get(\"Assemblies_Code_L1\")\n        var_Assemblies_Code_L1 = Assemblies_Code_L1_Table(\n            Company_Details=company_details_record,\n            Assemblies_Code_L1=Assemblies_Code_L1,\n        ).save()\n        messages.success(\n            request, f\"{Assemblies_Code_L1} - Assemblies Code L1 Created Successfully!\"",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L2_module",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def Assemblies_Code_L2_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Assemblies_Code_L2 = request.POST.get(\"Assemblies_Code_L2\")\n        Assemblies_Code_L1_id = request.POST.get(\"Assemblies_Code_L1\")\n        var_Assemblies_Code_L2 = Assemblies_Code_L2_Table(\n            Company_Details=company_details_record,\n            Assemblies_Code_L1=Assemblies_Code_L1_Table.objects.filter(\n                id=Assemblies_Code_L1_id\n            ).last(),",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Assemblies_Code_L3_module",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def Assemblies_Code_L3_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Assemblies_Code_L1_id = request.POST.get(\"Assemblies_Code_L1\")\n        Assemblies_Code_L2_id = request.POST.get(\"Assemblies_Code_L2\")\n        Assemblies_Code_L3 = request.POST.get(\"Assemblies_Code_L3\")\n        var_Assemblies_Code_L3 = Assemblies_Code_L3_Table(\n            Company_Details=company_details_record,\n            Assemblies_Code_L1=Assemblies_Code_L1_Table.objects.filter(\n                id=Assemblies_Code_L1_id",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "get_Assemblies_code_l2",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def get_Assemblies_code_l2(request):\n    Assemblies_code_l1_id = request.GET.get(\"Assemblies_code_l1_id\")\n    Assemblies_code_l2_options = Assemblies_Code_L2_Table.objects.filter(\n        Assemblies_Code_L1_id=Assemblies_code_l1_id\n    ).values(\"id\", \"Assemblies_Code_L2\")\n    return JsonResponse(list(Assemblies_code_l2_options), safe=False)\n@login_required\ndef get_Assemblies_code_l3(request):\n    Assemblies_code_l2_id = request.GET.get(\"Assemblies_code_l2_id\")\n    data = []",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "get_Assemblies_code_l3",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def get_Assemblies_code_l3(request):\n    Assemblies_code_l2_id = request.GET.get(\"Assemblies_code_l2_id\")\n    data = []\n    if Assemblies_code_l2_id:\n        # Fetch Assemblies_Code_L3 records related to the selected Assemblies_Code_L2\n        Assemblies_codes_l3 = Assemblies_Code_L3_Table.objects.filter(\n            Assemblies_Code_L2_id=Assemblies_code_l2_id\n        ).values(\"id\", \"Assemblies_Code_L3\")\n        for Assemblies_code in Assemblies_codes_l3:\n            data.append(",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Assemblies_Desplay",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def Assemblies_Desplay(request):\n    Assemblies_codes_level_1 = Assemblies_Code_L1_Table.objects.prefetch_related(\n        \"assemblies_code_l2_table_set__assemblies_code_l3_table_set\"\n    )\n    return render(\n        request,\n        \"assembliesApp/Assemblies_Desplay.html\",\n        {\"Assemblies_codes_level_1\": Assemblies_codes_level_1},\n    )\ndef Assemblies_Management(request):",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Assemblies_Management",
        "kind": 2,
        "importPath": "assembliesApp.views",
        "description": "assembliesApp.views",
        "peekOfCode": "def Assemblies_Management(request):\n    company_details_record = request.user.company_details\n    print(\"company_details_record\")\n    print(company_details_record)\n    if request.method == \"POST\":\n        if \"add_assemblies\" in request.POST:\n            parent_type = request.POST[\"parent_type\"]\n            assemblies_name = request.POST[\"assemblies_name\"]\n            if parent_type == \"level1\":\n                Assemblies_Code_L1_Table.objects.create(",
        "detail": "assembliesApp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "authenticationApp.migrations.0001_initial",
        "description": "authenticationApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "authenticationApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "authenticationApp.migrations.0002_initial",
        "description": "authenticationApp.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('authenticationApp', '0001_initial'),\n        ('companyApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',",
        "detail": "authenticationApp.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "authenticationApp.admin",
        "description": "authenticationApp.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    # Fields to display in the list view of users\n    list_display = ('username', 'email', 'phone_number', 'User_Role', 'is_staff', 'is_active')\n    # Fields that can be searched in the admin\n    search_fields = ('username', 'email', 'phone_number', 'User_Role')\n    # Filters on the right-hand side\n    list_filter = ('User_Role', 'is_staff', 'is_active', 'is_superuser')\n    # Group fields into sections in the detail form\n    fieldsets = (\n        (None, {'fields': ('username', 'password')}),",
        "detail": "authenticationApp.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationappConfig",
        "kind": 6,
        "importPath": "authenticationApp.apps",
        "description": "authenticationApp.apps",
        "peekOfCode": "class AuthenticationappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authenticationApp'",
        "detail": "authenticationApp.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "authenticationApp.models",
        "description": "authenticationApp.models",
        "peekOfCode": "class User(AbstractUser):\n    phone_number = models.CharField(max_length=255, default='', blank=True, null=True)\n    User_Role_Option = (\n        ('Admin', 'Admin'),\n        ('manager', 'manager'),\n        ('Viewer', 'Viewer'),\n    )\n    User_Role = models.CharField(max_length=255, choices=User_Role_Option, default='Admin')\n    company_details = models.ForeignKey('companyApp.CompanyDetailsTable', on_delete=models.CASCADE, null=True, blank=True, default=None)\n    # Self-referencing ForeignKey for 'created_by'",
        "detail": "authenticationApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "authenticationApp.urls",
        "description": "authenticationApp.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.login_func, name=\"login_func\"),\n    path('signup/', views.signup_func, name=\"signup_func\"),\n    path(\"logout_func/\", views.logout_func, name=\"logout_func\"),\n]",
        "detail": "authenticationApp.urls",
        "documentation": {}
    },
    {
        "label": "login_func",
        "kind": 2,
        "importPath": "authenticationApp.views",
        "description": "authenticationApp.views",
        "peekOfCode": "def login_func(request):\n    if request.method == \"POST\":\n        log_username = request.POST.get('email')\n        log_password = request.POST.get('password')\n        # this is for authenticate username and password for login\n        user = authenticate(username=log_username, password=log_password)\n        if user is not None:\n            login(request, user)\n            # messages.success(request, \"Successfully Logged In !!\")\n            return redirect('dashboard')",
        "detail": "authenticationApp.views",
        "documentation": {}
    },
    {
        "label": "signup_func",
        "kind": 2,
        "importPath": "authenticationApp.views",
        "description": "authenticationApp.views",
        "peekOfCode": "def signup_func(request):\n    if request.method == \"POST\":\n        sign_email = request.POST.get('email')\n        sign_password = request.POST.get('password')\n        confirm_sign_password = request.POST.get('re_password')\n        sign_first_name = request.POST.get('first_name')\n        sign_last_name = request.POST.get('last_name')\n        # chech the error inputs\n        user_username_info = User.objects.filter(username=sign_email)\n        user_email_info = User.objects.filter(email=sign_email)",
        "detail": "authenticationApp.views",
        "documentation": {}
    },
    {
        "label": "logout_func",
        "kind": 2,
        "importPath": "authenticationApp.views",
        "description": "authenticationApp.views",
        "peekOfCode": "def logout_func(request):\n    logout(request)\n    return redirect('login_func')",
        "detail": "authenticationApp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "companyApp.migrations.0001_initial",
        "description": "companyApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompanyDetailsTable',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "companyApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTableAdmin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class CompanyDetailsTableAdmin(admin.ModelAdmin):\n    list_display = ('User', 'Company_Legal_Name', 'Subscription', 'Company_Type', 'Email', 'Telephone', 'Country', 'created_at', 'updated_at')\n    search_fields = ('Company_Legal_Name', 'Email', 'Telephone', 'Country', 'Subscription')\n    list_filter = ('Subscription', 'Company_Type', 'Country', 'created_at')\n    readonly_fields = ('Company_Id', 'created_at', 'updated_at')\n@admin.register(ProjectTable)\nclass ProjectTableAdmin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Project_Name', 'Project_Start_Date', 'Default_Workflow', 'created_at', 'updated_at')\n    search_fields = ('Project_Name', 'Default_Workflow')\n    list_filter = ('Project_Start_Date', 'Company_Details')",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "ProjectTableAdmin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class ProjectTableAdmin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Project_Name', 'Project_Start_Date', 'Default_Workflow', 'created_at', 'updated_at')\n    search_fields = ('Project_Name', 'Default_Workflow')\n    list_filter = ('Project_Start_Date', 'Company_Details')\n    readonly_fields = ('Project_Id', 'created_at', 'updated_at')\n@admin.register(CompanyResourcesTable)\nclass CompanyResourcesTableAdmin(admin.ModelAdmin):\n    list_display = ('Resource_Name', 'Resource_Code_L1', 'Resource_Code_L2', 'Resource_Code_L3', 'created_at', 'updated_at')\n    search_fields = ('Resource_Name', 'Resource_Code_L1')\n    # list_filter = ('created_at')",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTableAdmin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class CompanyResourcesTableAdmin(admin.ModelAdmin):\n    list_display = ('Resource_Name', 'Resource_Code_L1', 'Resource_Code_L2', 'Resource_Code_L3', 'created_at', 'updated_at')\n    search_fields = ('Resource_Name', 'Resource_Code_L1')\n    # list_filter = ('created_at')\n    readonly_fields = ('created_at', 'updated_at')\n@admin.register(Resource_Code_L1_Table)\nclass ResourceCodeL1Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L1',)\n    list_filter = ('Company_Details', 'created_at')",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "ResourceCodeL1Admin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class ResourceCodeL1Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L1',)\n    list_filter = ('Company_Details', 'created_at')\n    ordering = ('-created_at',)\n@admin.register(Resource_Code_L2_Table)\nclass ResourceCodeL2Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L2',)\n    list_filter = ('Company_Details', 'Resource_Code_L1', 'created_at')",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "ResourceCodeL2Admin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class ResourceCodeL2Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L2',)\n    list_filter = ('Company_Details', 'Resource_Code_L1', 'created_at')\n    ordering = ('-created_at',)\n@admin.register(Resource_Code_L3_Table)\nclass ResourceCodeL3Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'Resource_Code_L3', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L3',)\n    list_filter = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'created_at')",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "ResourceCodeL3Admin",
        "kind": 6,
        "importPath": "companyApp.admin",
        "description": "companyApp.admin",
        "peekOfCode": "class ResourceCodeL3Admin(admin.ModelAdmin):\n    list_display = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'Resource_Code_L3', 'created_at', 'updated_at')\n    search_fields = ('Resource_Code_L3',)\n    list_filter = ('Company_Details', 'Resource_Code_L1', 'Resource_Code_L2', 'created_at')\n    ordering = ('-created_at',)",
        "detail": "companyApp.admin",
        "documentation": {}
    },
    {
        "label": "CompanyappConfig",
        "kind": 6,
        "importPath": "companyApp.apps",
        "description": "companyApp.apps",
        "peekOfCode": "class CompanyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'companyApp'\n    def ready(self):\n        import companyApp.signals",
        "detail": "companyApp.apps",
        "documentation": {}
    },
    {
        "label": "CompanyDetailsTable",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class CompanyDetailsTable(models.Model):\n    class Meta:\n        verbose_name_plural = \"Company Table\"\n    User = models.ForeignKey(User, on_delete=models.CASCADE)\n    Subscription_Option = (\n        ('Starter', 'Starter'),\n        ('Company', 'Company'),\n        ('Enterprise', 'Enterprise'),\n    )\n    Subscription = models.CharField(max_length=255, choices=Subscription_Option, default='Starter')",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "ProjectTable",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class ProjectTable(models.Model):\n    class Meta:\n        verbose_name_plural = \"Project Table\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Project_Id = models.CharField(max_length=255, unique=True, default=uuid.uuid4, editable=False)\n    Project_Name = models.CharField(max_length=255)\n    Project_Start_Date = models.DateField(null=True)\n    Short_Description = RichTextField(null=True, blank=True)\n    Default_Workflow = models.CharField(max_length=255, null=True, blank=True)\n    Note_book = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_Table",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class Resource_Code_L1_Table(models.Model):\n    class Meta:\n        verbose_name = \"Resource Code Level 1\"\n        verbose_name_plural = \"Resource Codes Level 1\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L1 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def total_expense_quantity_calculation(self):\n        from expenseApp.models import ExpenseTable",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L2_Table",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class Resource_Code_L2_Table(models.Model):\n    class Meta:\n        verbose_name = \"Resource Code Level 2\"\n        verbose_name_plural = \"Resource Codes Level 2\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L1 = models.ForeignKey(Resource_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L2 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def total_expense_quantity_calculation(self):",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_Table",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class Resource_Code_L3_Table(models.Model):\n    class Meta:\n        verbose_name = \"Resource Code Level 3\"\n        verbose_name_plural = \"Resource Codes Level 3\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L1 = models.ForeignKey(Resource_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L2 = models.ForeignKey(Resource_Code_L2_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L3 = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "CompanyResourcesTable",
        "kind": 6,
        "importPath": "companyApp.models",
        "description": "companyApp.models",
        "peekOfCode": "class CompanyResourcesTable(models.Model):\n    class Meta:\n        verbose_name_plural = \"Company Resources Table\"\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Title = models.CharField(max_length=255, null=True, blank=True, default=None) # this is resource name\n    Resource_Name = models.CharField(max_length=255, null=True, blank=True) # this is resource code\n    Resource_Code_L1 = models.ForeignKey(Resource_Code_L1_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L2 = models.ForeignKey(Resource_Code_L2_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Resource_Code_L3 = models.ForeignKey(Resource_Code_L3_Table, on_delete=models.CASCADE, null=True, blank=True)\n    Unit_of_Measure = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "companyApp.models",
        "documentation": {}
    },
    {
        "label": "create_resource_codes",
        "kind": 2,
        "importPath": "companyApp.signals",
        "description": "companyApp.signals",
        "peekOfCode": "def create_resource_codes(sender, instance, created, **kwargs):\n    print(\"saving 5 resourse level 1 ...\")\n    if created:  # Check if a new CompanyDetailsTable row is created\n        default_codes = [\n            \"MATERIALS\",\n            \"Labor\",\n            \"EQUIPMENT\",\n            \"Subcontractors\",\n            \"OTHERS\"\n        ]",
        "detail": "companyApp.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "companyApp.urls",
        "description": "companyApp.urls",
        "peekOfCode": "urlpatterns = [\n    # adding users\n    path('create-user/', views.create_user, name=\"create_user\"),\n    path('user_list', views.user_list, name=\"user_list\"),\n    path('users/view/<int:user_id>/', views.view_user, name='view_user'),\n    path('users/edit/<int:user_id>/', views.edit_user, name='edit_user'),\n    path('users/delete/<int:user_id>/', views.delete_user, name='delete_user'),\n    # company\n    path('company-settings/', views.company_settings, name=\"company_settings\"),\n    path('company-subscription/', views.company_subscription, name=\"company_subscription\"),",
        "detail": "companyApp.urls",
        "documentation": {}
    },
    {
        "label": "company_settings",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def company_settings(request):\n    # Retrieve the latest company details for the current user\n    company_details = request.user.company_details\n    if request.method == \"POST\":\n        # Extract POST data\n        company_data = {\n            'Company_Legal_Name': request.POST.get('Company_Legal_Name'),\n            'Company_Type': request.POST.get('Company_Type'),\n            'Email': request.POST.get('Email'),\n            'Telephone': request.POST.get('Telephone'),",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "company_subscription",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def company_subscription(request):\n    return render(request, \"companyApp/company_subscription.html\")\n@login_required\ndef create_project(request):\n    if request.method == 'POST':\n        # Get data from the form\n        project_name = request.POST.get('project_name')\n        project_start_date = request.POST.get('project_start_date')\n        short_description = request.POST.get('short_description')\n        default_workflow = request.POST.get('default_workflow')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "create_project",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def create_project(request):\n    if request.method == 'POST':\n        # Get data from the form\n        project_name = request.POST.get('project_name')\n        project_start_date = request.POST.get('project_start_date')\n        short_description = request.POST.get('short_description')\n        default_workflow = request.POST.get('default_workflow')\n        note_book = request.POST.get('note_book')\n        assign_user_lists = request.POST.getlist('assign_user_lists')\n        print('assign_user_lists')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "list_project",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def list_project(request):\n    company_details_record = request.user.company_details\n    all_project_filter = ProjectTable.objects.filter(Company_Details=company_details_record)\n    # print(all_project_filter)\n    context = {'all_project_filter':all_project_filter}\n    return render(request, \"companyApp/project_list.html\", context)\n@login_required\ndef view_project(request, project_id):\n    project = get_object_or_404(ProjectTable, id=project_id)\n    return render(request, 'companyApp/view_project.html', {'project': project})",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "view_project",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def view_project(request, project_id):\n    project = get_object_or_404(ProjectTable, id=project_id)\n    return render(request, 'companyApp/view_project.html', {'project': project})\n@login_required\ndef edit_project(request, project_id):\n    project = get_object_or_404(ProjectTable, id=project_id)\n    if request.method == 'POST':\n        project.Project_Name = request.POST.get('project_name')\n        project.Project_Start_Date = request.POST.get('project_start_date')\n        project.Short_Description = request.POST.get('short_description')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "edit_project",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def edit_project(request, project_id):\n    project = get_object_or_404(ProjectTable, id=project_id)\n    if request.method == 'POST':\n        project.Project_Name = request.POST.get('project_name')\n        project.Project_Start_Date = request.POST.get('project_start_date')\n        project.Short_Description = request.POST.get('short_description')\n        project.Default_Workflow = request.POST.get('default_workflow')\n        project.Note_book = request.POST.get('note_book')\n        assign_user_lists = request.POST.getlist('assign_user_lists')\n        project.Assigned_User.set(assign_user_lists)",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "delete_project",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def delete_project(request, project_id):\n    project = get_object_or_404(ProjectTable, id=project_id)\n    if request.method == 'POST':\n        project.delete()\n        messages.success(request, \"Project deleted successfully.\")\n        return redirect('list_project')\n    return render(request, 'companyApp/delete_project.html', {'project': project})\n@login_required\ndef create_user(request):\n    if request.method == 'POST':",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def create_user(request):\n    if request.method == 'POST':\n        # Get data from the form\n        # username = request.POST.get('username')\n        first_name = request.POST.get('first_name')\n        last_name = request.POST.get('last_name')\n        email = request.POST.get('email')\n        phone_number = request.POST.get('phone_number')\n        user_role = request.POST.get('user_role')\n        password = request.POST.get('password')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "user_list",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def user_list(request):\n    company_details_record = request.user.company_details\n    filter_users = User.objects.filter(company_details = company_details_record).exclude()\n    context = {'filter_users':filter_users}\n    return render(request, \"companyApp/user_list.html\", context)\n@login_required\ndef view_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, 'companyApp/view_user.html', {'user': user})\n@login_required",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "view_user",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def view_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, 'companyApp/view_user.html', {'user': user})\n@login_required\ndef edit_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        user.first_name = request.POST.get('first_name')\n        user.last_name = request.POST.get('last_name')\n        user.email = request.POST.get('email')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "edit_user",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def edit_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        user.first_name = request.POST.get('first_name')\n        user.last_name = request.POST.get('last_name')\n        user.email = request.POST.get('email')\n        user.phone_number = request.POST.get('phone_number')\n        user.user_role = request.POST.get('user_role')\n        user.save()\n        messages.success(request, \"User updated successfully.\")",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def delete_user(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        user.delete()\n        messages.success(request, \"User deleted successfully.\")\n        return redirect('user_list')\n    return render(request, 'companyApp/delete_user.html', {'user': user})\ndef Resource_Code_L1_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L1_module",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Code_L1_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Resource_Code_L1 = request.POST.get('Resource_Code_L1')\n        var_Resource_Code_L1 = Resource_Code_L1_Table(\n            Company_Details = company_details_record,\n            Resource_Code_L1 = Resource_Code_L1\n        ).save()\n        messages.success(request, f\"{Resource_Code_L1} - Resource Code L1 Created Successfully!\")    \n        return redirect('Resource_Code_L1_module')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L2_module",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Code_L2_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Resource_Code_L2 = request.POST.get('Resource_Code_L2')\n        Resource_Code_L1_id = request.POST.get('Resource_Code_L1')\n        var_Resource_Code_L2 = Resource_Code_L2_Table(\n            Company_Details = company_details_record,\n            Resource_Code_L1= Resource_Code_L1_Table.objects.filter(id=Resource_Code_L1_id).last(),\n            Resource_Code_L2 = Resource_Code_L2\n        ).save()",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Code_L3_module",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Code_L3_module(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        Resource_Code_L1_id = request.POST.get('Resource_Code_L1')\n        Resource_Code_L2_id = request.POST.get('Resource_Code_L2')\n        Resource_Code_L3 = request.POST.get('Resource_Code_L3')\n        var_Resource_Code_L3 = Resource_Code_L3_Table(\n            Company_Details = company_details_record,\n            Resource_Code_L1= Resource_Code_L1_Table.objects.filter(id=Resource_Code_L1_id).last(),\n            Resource_Code_L2 = Resource_Code_L2_Table.objects.filter(id=Resource_Code_L2_id).last(),",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "get_resource_code_l2",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def get_resource_code_l2(request):\n    resource_code_l1_id = request.GET.get(\"resource_code_l1_id\")\n    print(resource_code_l1_id)\n    resource_code_l2_options = Resource_Code_L2_Table.objects.filter(\n        Resource_Code_L1_id=resource_code_l1_id\n    ).values(\"id\", \"Resource_Code_L2\")\n    return JsonResponse(list(resource_code_l2_options), safe=False)\ndef get_resource_code_l3(request):\n    resource_code_l2_id = request.GET.get('resource_code_l2_id')\n    data = []",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "get_resource_code_l3",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def get_resource_code_l3(request):\n    resource_code_l2_id = request.GET.get('resource_code_l2_id')\n    data = []\n    if resource_code_l2_id:\n        # Fetch Resource_Code_L3 records related to the selected Resource_Code_L2\n        resource_codes_l3 = Resource_Code_L3_Table.objects.filter(Resource_Code_L2_id=resource_code_l2_id).values('id', 'Resource_Code_L3')\n        for resource_code in resource_codes_l3:\n            data.append({\n                'id': resource_code['id'],\n                'Resource_Code_L3': resource_code['Resource_Code_L3'],",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Create_Resource_Dictionary",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Create_Resource_Dictionary(request):\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        Resource_Title = request.POST.get('Resource_Title')\n        Resource_Name = request.POST.get('Resource_Name')\n        Resources_Category = request.POST.get('Resources_Category')\n        Resource_Code_L1_id = request.POST.get('Resource_Code_L1')\n        Resource_Code_L2_id = request.POST.get('Resource_Code_L2')\n        Resource_Code_L3_id = request.POST.get('Resource_Code_L3')\n        Unit_of_Measure = request.POST.get('Unit_of_Measure')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "duplicate_resource",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def duplicate_resource(request, resource_id):\n    # Fetch the existing resource record\n    original_resource = get_object_or_404(CompanyResourcesTable, id=resource_id)\n    # Create a new resource record with \"Duplicate\" appended to the name\n    new_resource = CompanyResourcesTable(\n        Company_Details=original_resource.Company_Details,\n        Resource_Name=f\"{original_resource.Resource_Name} - Duplicate\",\n        Resource_Code_L1=original_resource.Resource_Code_L1,\n        Resource_Code_L2=original_resource.Resource_Code_L2,\n        Resource_Code_L3=original_resource.Resource_Code_L3,",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "List_Resource_Dictionary",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def List_Resource_Dictionary(request):\n    company_details_record = request.user.company_details\n    filter_resoures = CompanyResourcesTable.objects.filter(Company_Details = company_details_record)\n    context = {'filter_resoures':filter_resoures}\n    return render(request, \"companyApp/List_Resource_Dictionary.html\", context)\n@login_required\ndef edit_resource(request, pk):\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        get_resource_record_id = request.POST.get('get_resource_record_id')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "edit_resource",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def edit_resource(request, pk):\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        get_resource_record_id = request.POST.get('get_resource_record_id')\n        get_resource_record = CompanyResourcesTable.objects.filter(id=get_resource_record_id).last()\n        Resource_Title = request.POST.get('Resource_Title')\n        Resource_Name = request.POST.get('Resource_Name')\n        Resources_Category = request.POST.get('Resources_Category')\n        Resource_Code_L1_id = request.POST.get('Resource_Code_L1')\n        Resource_Code_L2_id = request.POST.get('Resource_Code_L2')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Desplay",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Desplay(request):\n    resource_codes_level_1 = Resource_Code_L1_Table.objects.prefetch_related(\n        'resource_code_l2_table_set__resource_code_l3_table_set'\n    )\n    return render(request, 'companyApp/Resource_Desplay.html', {'resource_codes_level_1': resource_codes_level_1})\ndef Resource_Delete(request, pk):\n    try:\n        get_resource = CompanyResourcesTable.objects.get(id=pk).delete()\n        messages.success(request, \"Resource Deleted Successfully!\")\n        return redirect('List_Resource_Dictionary')",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Delete",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Delete(request, pk):\n    try:\n        get_resource = CompanyResourcesTable.objects.get(id=pk).delete()\n        messages.success(request, \"Resource Deleted Successfully!\")\n        return redirect('List_Resource_Dictionary')\n    except Exception as exc:\n        messages.success(request, f\"{exc}\")\n        return redirect('List_Resource_Dictionary')\ndef Resource_Management(request):\n    company_details_record = request.user.company_details",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Resource_Management",
        "kind": 2,
        "importPath": "companyApp.views",
        "description": "companyApp.views",
        "peekOfCode": "def Resource_Management(request):\n    company_details_record = request.user.company_details\n    print('company_details_record')\n    print(company_details_record)\n    if request.method == \"POST\":\n        if 'add_resource' in request.POST:\n            parent_type = request.POST['parent_type']\n            resource_name = request.POST['resource_name']\n            if parent_type == 'level1':\n                Resource_Code_L1_Table.objects.create(",
        "detail": "companyApp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contractApp.migrations.0001_initial",
        "description": "contractApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('assembliesApp', '0001_initial'),\n        ('companyApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SubContractInvoiceTable',\n            fields=[",
        "detail": "contractApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceTableAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractInvoiceTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'invoice_contract_row', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')\n    search_fields = ('invoice_contract_row__id',)\n    ordering = ('-created_at',)\n    date_hierarchy = 'created_at'\n@admin.register(MainContractInvoiceDetailsTable)\nclass MainContractInvoiceDetailsTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'main_contract_invoice', 'main_contract_assembly', 'Invoice_Quantity', 'Invoice_Revenue', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceDetailsTableAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractInvoiceDetailsTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'main_contract_invoice', 'main_contract_assembly', 'Invoice_Quantity', 'Invoice_Revenue', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')\n    search_fields = ('main_contract_invoice__id', 'main_contract_assembly__id')\n    ordering = ('-created_at',)\n    date_hierarchy = 'created_at'\n@admin.register(SubContractInvoiceTable)\nclass SubContractInvoiceTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'invoice_contract_row', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceTableAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class SubContractInvoiceTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'invoice_contract_row', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')\n    search_fields = ('invoice_contract_row__id',)\n    ordering = ('-created_at',)\n    date_hierarchy = 'created_at'\n@admin.register(SubContractInvoiceDetailsTable)\nclass SubContractInvoiceDetailsTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'sub_contract_invoice', 'sub_contract_assembly', 'Invoice_Quantity', 'Invoice_Revenue', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceDetailsTableAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class SubContractInvoiceDetailsTableAdmin(admin.ModelAdmin):\n    list_display = ('id', 'sub_contract_invoice', 'sub_contract_assembly', 'Invoice_Quantity', 'Invoice_Revenue', 'created_at', 'updated_at')\n    list_filter = ('created_at', 'updated_at')\n    search_fields = ('sub_contract_invoice__id', 'sub_contract_assembly__id')\n    ordering = ('-created_at',)\n    date_hierarchy = 'created_at'\nclass MainContractDetailInline(admin.TabularInline):\n    model = MainContractDetail\n    extra = 1\n    fields = (",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "MainContractDetailInline",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractDetailInline(admin.TabularInline):\n    model = MainContractDetail\n    extra = 1\n    fields = (\n        'comb_assem_code',\n        'assembly_name',\n        'item_description',\n        'unit',\n        'unit_cost',\n        'budget_quantity',",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "MainContractAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractAdmin(admin.ModelAdmin):\n    list_display = ('contract_name', 'company_details')\n    search_fields = ('contract_name', 'company_details__name')\n    inlines = [MainContractDetailInline]\n@admin.register(MainContractDetail)\nclass MainContractDetailAdmin(admin.ModelAdmin):\n    list_display = (\n        'main_contract',\n        'comb_assem_code',\n        'assembly_name',",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "MainContractDetailAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractDetailAdmin(admin.ModelAdmin):\n    list_display = (\n        'main_contract',\n        'comb_assem_code',\n        'assembly_name',\n        'unit',\n        'unit_cost',\n        'budget_quantity',\n        'budget_costs',\n        'markup',",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "SubContractDetailInline",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class SubContractDetailInline(admin.TabularInline):\n    model = SubContractDetail\n    extra = 1\n@admin.register(SubContractTable)\nclass SubContractTableAdmin(admin.ModelAdmin):\n    list_display = ('subcontract_name', 'company_details', 'contract_value', 'contract_total_price')\n    inlines = [SubContractDetailInline]\n@admin.register(SubContractDetail)\nclass SubContractDetailAdmin(admin.ModelAdmin):\n    list_display = ('sub_contract', 'comb_assem_code', 'assembly_value', 'item_description', 'unit', 'unit_cost', 'subcontract_quantity', 'subcontract_total_price')",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "SubContractTableAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class SubContractTableAdmin(admin.ModelAdmin):\n    list_display = ('subcontract_name', 'company_details', 'contract_value', 'contract_total_price')\n    inlines = [SubContractDetailInline]\n@admin.register(SubContractDetail)\nclass SubContractDetailAdmin(admin.ModelAdmin):\n    list_display = ('sub_contract', 'comb_assem_code', 'assembly_value', 'item_description', 'unit', 'unit_cost', 'subcontract_quantity', 'subcontract_total_price')\n    list_filter = ('sub_contract', 'assembly_value')\n    search_fields = ('comb_assem_code', 'item_description', 'unit')\n@admin.register(MainContractBudgetCostTable)\nclass MainContractBudgetCostAdmin(admin.ModelAdmin):",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "SubContractDetailAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class SubContractDetailAdmin(admin.ModelAdmin):\n    list_display = ('sub_contract', 'comb_assem_code', 'assembly_value', 'item_description', 'unit', 'unit_cost', 'subcontract_quantity', 'subcontract_total_price')\n    list_filter = ('sub_contract', 'assembly_value')\n    search_fields = ('comb_assem_code', 'item_description', 'unit')\n@admin.register(MainContractBudgetCostTable)\nclass MainContractBudgetCostAdmin(admin.ModelAdmin):\n    list_display = ('contract_details', 'Resource_Code', 'budget_unit_rates', 'budget_cost', 'created_at', 'updated_at')\n    list_filter = ('contract_details', 'Resource_Code', 'created_at', 'updated_at')\n    search_fields = ('contract_details__name', 'Resource_Code__name', 'budget_unit_rates', 'budget_cost')\n    ordering = ('-created_at',)",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "MainContractBudgetCostAdmin",
        "kind": 6,
        "importPath": "contractApp.admin",
        "description": "contractApp.admin",
        "peekOfCode": "class MainContractBudgetCostAdmin(admin.ModelAdmin):\n    list_display = ('contract_details', 'Resource_Code', 'budget_unit_rates', 'budget_cost', 'created_at', 'updated_at')\n    list_filter = ('contract_details', 'Resource_Code', 'created_at', 'updated_at')\n    search_fields = ('contract_details__name', 'Resource_Code__name', 'budget_unit_rates', 'budget_cost')\n    ordering = ('-created_at',)\n    readonly_fields = ('created_at', 'updated_at')",
        "detail": "contractApp.admin",
        "documentation": {}
    },
    {
        "label": "ContractappConfig",
        "kind": 6,
        "importPath": "contractApp.apps",
        "description": "contractApp.apps",
        "peekOfCode": "class ContractappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contractApp'",
        "detail": "contractApp.apps",
        "documentation": {}
    },
    {
        "label": "MainContract",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class MainContract(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_name = models.CharField(max_length=255, verbose_name=\"Contract Name\")\n    contract_total_budget_costs = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_markup_amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_target_profit = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractDetail",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class MainContractDetail(models.Model):\n    main_contract = models.ForeignKey(MainContract, on_delete=models.CASCADE, related_name=\"details\")\n    comb_assem_code = models.CharField(max_length=50, verbose_name=\"Combination Assembly Code\")\n    assembly_name = models.CharField(max_length=100, verbose_name=\"Assembly Name\")\n    assembly_row = models.ForeignKey(Estimation_Assemblies_Table, on_delete=models.CASCADE, default=None, blank=True, null=True)\n    item_description = models.TextField(verbose_name=\"Item Description\")\n    unit = models.CharField(max_length=50, verbose_name=\"Unit\")\n    unit_cost = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Unit Cost\")\n    budget_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Budget Quantity\")\n    contract_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Contract Quantity\", default=0, blank=True, null=True)",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class MainContractInvoiceTable(models.Model):\n    invoice_contract_row = models.ForeignKey(MainContract, on_delete=models.CASCADE, related_name=\"contract_invoices\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_MainContractInvoiceDetails(self):\n        return MainContractInvoiceDetailsTable.objects.filter(main_contract_invoice=self)\nclass MainContractInvoiceDetailsTable(models.Model):\n    main_contract_invoice = models.ForeignKey(MainContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    main_contract_assembly = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceDetailsTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class MainContractInvoiceDetailsTable(models.Model):\n    main_contract_invoice = models.ForeignKey(MainContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    main_contract_assembly = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")\n    Invoice_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\")\n    Next_Remain_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\", default=None, blank=True, null=True)\n    Next_Remain_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\", default=None, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\nclass MainContractBudgetCostTable(models.Model):",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContractBudgetCostTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class MainContractBudgetCostTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_details = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE)\n    Resource_Code = models.ForeignKey(CompanyResourcesTable, on_delete=models.CASCADE)\n    budget_unit_rates = models.CharField(max_length=255)\n    budget_cost = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\nclass SubContractTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "SubContractTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class SubContractTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_value = models.ForeignKey('contractApp.MainContract', on_delete=models.CASCADE, default=None)\n    subcontract_name = models.CharField(max_length=255, verbose_name=\"Contract Name\")\n    contract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"{self.subcontract_name} - {self.company_details}\"\n    def filter_sub_contract_details(self):",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "SubContractDetail",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class SubContractDetail(models.Model):\n    sub_contract = models.ForeignKey(SubContractTable, on_delete=models.CASCADE, related_name=\"details\")\n    comb_assem_code = models.CharField(max_length=50, verbose_name=\"Combination Assembly Code\")\n    assembly_value = models.ForeignKey('assembliesApp.Estimation_Assemblies_Table', on_delete=models.CASCADE)\n    item_description = models.TextField(verbose_name=\"Item Description\")\n    unit = models.CharField(max_length=50, verbose_name=\"Unit\")\n    unit_cost = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Unit Cost\")\n    subcontract_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"SubContract Contract Quantity\")\n    subcontract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Subcontract Total Price\")\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class SubContractInvoiceTable(models.Model):\n    invoice_contract_row = models.ForeignKey(SubContractTable, on_delete=models.CASCADE, related_name=\"contract_invoices\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_SubContractInvoiceDetails(self):\n        return SubContractInvoiceDetailsTable.objects.filter(sub_contract_invoice=self)\nclass SubContractInvoiceDetailsTable(models.Model):\n    sub_contract_invoice = models.ForeignKey(SubContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    sub_contract_assembly = models.ForeignKey(SubContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceDetailsTable",
        "kind": 6,
        "importPath": "contractApp.models",
        "description": "contractApp.models",
        "peekOfCode": "class SubContractInvoiceDetailsTable(models.Model):\n    sub_contract_invoice = models.ForeignKey(SubContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    sub_contract_assembly = models.ForeignKey(SubContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")\n    Invoice_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\")\n    Next_Remain_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\", default=None, blank=True, null=True)\n    Next_Remain_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\", default=None, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "contractApp.models",
        "documentation": {}
    },
    {
        "label": "MainContract",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class MainContract(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_name = models.CharField(max_length=255, verbose_name=\"Contract Name\")\n    contract_total_budget_costs = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_markup_amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    contract_total_target_profit = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "MainContractDetail",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class MainContractDetail(models.Model):\n    main_contract = models.ForeignKey(MainContract, on_delete=models.CASCADE, related_name=\"details\")\n    comb_assem_code = models.CharField(max_length=50, verbose_name=\"Combination Assembly Code\")\n    assembly_name = models.CharField(max_length=100, verbose_name=\"Assembly Name\")\n    assembly_row = models.ForeignKey(Estimation_Assemblies_Table, on_delete=models.CASCADE, default=None, blank=True, null=True)\n    item_description = models.TextField(verbose_name=\"Item Description\")\n    unit = models.CharField(max_length=50, verbose_name=\"Unit\")\n    unit_cost = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Unit Cost\")\n    budget_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Budget Quantity\")\n    contract_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Contract Quantity\", default=0, blank=True, null=True)",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class MainContractInvoiceTable(models.Model):\n    invoice_contract_row = models.ForeignKey(MainContract, on_delete=models.CASCADE, related_name=\"contract_invoices\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_MainContractInvoiceDetails(self):\n        return MainContractInvoiceDetailsTable.objects.filter(main_contract_invoice=self)\nclass MainContractInvoiceDetailsTable(models.Model):\n    main_contract_invoice = models.ForeignKey(MainContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    main_contract_assembly = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "MainContractInvoiceDetailsTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class MainContractInvoiceDetailsTable(models.Model):\n    main_contract_invoice = models.ForeignKey(MainContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    main_contract_assembly = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")\n    Invoice_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\nclass MainContractBudgetCostTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_details = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE)",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "MainContractBudgetCostTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class MainContractBudgetCostTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_details = models.ForeignKey(MainContractDetail, on_delete=models.CASCADE)\n    Resource_Code = models.ForeignKey(CompanyResourcesTable, on_delete=models.CASCADE)\n    budget_unit_rates = models.CharField(max_length=255)\n    budget_cost = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\nclass SubContractTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "SubContractTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class SubContractTable(models.Model):\n    company_details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Company Details\")\n    contract_value = models.ForeignKey('contractApp.MainContract', on_delete=models.CASCADE, default=None)\n    subcontract_name = models.CharField(max_length=255, verbose_name=\"Contract Name\")\n    contract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Total Budget Cost\", null=True, blank=True, default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"{self.subcontract_name} - {self.company_details}\"\n    def filter_sub_contract_details(self):",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "SubContractDetail",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class SubContractDetail(models.Model):\n    sub_contract = models.ForeignKey(SubContractTable, on_delete=models.CASCADE, related_name=\"details\")\n    comb_assem_code = models.CharField(max_length=50, verbose_name=\"Combination Assembly Code\")\n    assembly_value = models.ForeignKey('assembliesApp.Estimation_Assemblies_Table', on_delete=models.CASCADE)\n    item_description = models.TextField(verbose_name=\"Item Description\")\n    unit = models.CharField(max_length=50, verbose_name=\"Unit\")\n    unit_cost = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Unit Cost\")\n    subcontract_quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"SubContract Contract Quantity\")\n    subcontract_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Subcontract Total Price\")\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class SubContractInvoiceTable(models.Model):\n    invoice_contract_row = models.ForeignKey(SubContractTable, on_delete=models.CASCADE, related_name=\"contract_invoices\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def filter_SubContractInvoiceDetails(self):\n        return SubContractInvoiceDetailsTable.objects.filter(sub_contract_invoice=self)\nclass SubContractInvoiceDetailsTable(models.Model):\n    sub_contract_invoice = models.ForeignKey(SubContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    sub_contract_assembly = models.ForeignKey(SubContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "SubContractInvoiceDetailsTable",
        "kind": 6,
        "importPath": "contractApp.tests",
        "description": "contractApp.tests",
        "peekOfCode": "class SubContractInvoiceDetailsTable(models.Model):\n    sub_contract_invoice = models.ForeignKey(SubContractInvoiceTable, on_delete=models.CASCADE, related_name=\"contract_details_invoice_details\")\n    sub_contract_assembly = models.ForeignKey(SubContractDetail, on_delete=models.CASCADE, related_name=\"contract_details_invoice\")\n    Invoice_Quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Quantity\")\n    Invoice_Revenue = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Invoice Revenue\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "contractApp.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "contractApp.urls",
        "description": "contractApp.urls",
        "peekOfCode": "urlpatterns = [\n    # adding users\n    path('create_contract/', views.create_contract, name=\"create_contract\"),\n    path('save-contract/', views.save_contract, name='save_contract'),\n    path('contract-list/', views.contract_list, name='contract_list'),\n    path('contract/<int:contract_id>/', views.view_contract, name='view_contract'),\n    path('create_invoice/', views.create_invoice, name='create_invoice'),\n    path('contract/delete/<int:contract_id>/', views.delete_contract, name='delete_contract'),\n    path('contract-edit/<int:contract_id>/', views.edit_contract, name='edit_contract'),\n    path('save-edit-contract/', views.save_edit_contract, name='save_edit_contract'),",
        "detail": "contractApp.urls",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "class DateTimeEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\nimport re\nfrom decimal import Decimal, InvalidOperation\nfrom django.contrib.auth.decorators import login_required\nfrom django.db.models import F, Sum\nfrom django.http import JsonResponse",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "clean_decimal",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def clean_decimal(value):\n    \"\"\"Remove any characters that are not digits or a decimal point and convert to Decimal.\"\"\"\n    clean_value = re.sub(r\"[^\\d.]\", \"\", value)\n    try:\n        return Decimal(clean_value)\n    except InvalidOperation:\n        return Decimal(0)  # or handle this in a way that suits your needs\n@login_required\ndef save_contract(request):\n    company_details_record = request.user.company_details",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "save_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def save_contract(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        print(request.POST)\n        contract_name = request.POST.get(\"contract_name\")\n        comb_assem_code = request.POST.get(\"Comb_Assem_Code\")\n        number_input = request.POST.get(\"numberInput\")\n        numberInput_id = request.POST.get(\"numberInput_id\")\n        item_description = request.POST.get(\"Item_Description\")\n        print(",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "save_edit_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def save_edit_contract(request):\n    company_details_record = request.user.company_details\n    if request.method == \"POST\":\n        print(request.POST)\n        main_contract_id = request.POST.get(\n            \"main_contract_id\"\n        )  # Get main_contract.id from the request\n        contract_name = request.POST.get(\"contract_name\")\n        comb_assem_code = request.POST.get(\"Comb_Assem_Code\")\n        number_input = request.POST.get(\"numberInput\")",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "contract_list",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def contract_list(request):\n    company_details_record = request.user.company_details\n    contracts = MainContract.objects.filter(\n        company_details=company_details_record\n    ).order_by(\"-id\")\n    return render(request, \"contractApp/contract_list.html\", {\"contracts\": contracts})\n@login_required\n@csrf_exempt\ndef create_invoice(request):\n    if request.method == \"POST\":",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "create_invoice",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def create_invoice(request):\n    if request.method == \"POST\":\n        invoice_qty = []\n        contract_details_id = []\n        for key in request.POST:\n            if key.startswith(\"invoice_qty_\"):\n                invoice_qty.append(request.POST[key])\n            if key.startswith(\"contract_details_id_\"):\n                contract_details_id.append(request.POST[key])\n        contract_id = request.POST.get(\"contract_id\")",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "view_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def view_contract(request, contract_id):\n    # Fetch the contract using the contract ID, or return a 404 if not found\n    contract = get_object_or_404(MainContract, id=contract_id)\n    # Fetch the related MainContractDetail records\n    contract_details = MainContractDetail.objects.filter(main_contract=contract)\n    filter_expense = ExpenseTable.objects.filter(contract_value=contract)\n    print(filter_expense)\n    total_cost = sum(expense.total_cost for expense in filter_expense)\n    filter_subcontracts = SubContractTable.objects.filter(contract_value=contract)\n    # subcontract_total_cost = sum(subcontract.contract_total_price for subcontract in filter_subcontracts)",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "delete_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def delete_contract(request, contract_id):\n    # Get the contract, or return a 404 if not found\n    contract = get_object_or_404(MainContract, id=contract_id)\n    # Check if the user is authorized to delete this contract (optional)\n    if contract.company_details.User != request.user:\n        return JsonResponse(\n            {\n                \"status\": \"error\",\n                \"message\": \"You do not have permission to delete this contract.\",\n            },",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "create_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def create_contract(request):\n    company_details_record = request.user.company_details\n    filter_Estimation_Assemblies_Table = Estimation_Assemblies_Table.objects.filter(\n        Company_Details=company_details_record\n    )\n    # Gather assemblies and resource totals\n    assemblies_data = []\n    for assembly in filter_Estimation_Assemblies_Table:\n        assemblies_data.append(\n            {",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "edit_contract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def edit_contract(request, contract_id):\n    company_details_record = request.user.company_details\n    main_contract = MainContract.objects.get(id=contract_id)\n    main_contract_details = MainContractDetail.objects.filter(\n        main_contract=main_contract\n    )\n    filter_Estimation_Assemblies_Table = Estimation_Assemblies_Table.objects.filter(\n        Company_Details=company_details_record\n    )\n    # Gather assemblies and resource totals",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "delete_contract_row",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def delete_contract_row(request, row_id):\n    print(\"row_id\")\n    if request.method == \"DELETE\":\n        try:\n            d = 3\n            print(\"row_id\")\n            print(row_id)\n            # Fetch the row from the database\n            row = MainContractDetail.objects.get(id=row_id)\n            row.delete()  # Delete the row",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "Contract_Management",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def Contract_Management(request):\n    company_details_record = request.user.company_details\n    print(\"company_details_record\")\n    print(company_details_record)\n    if request.method == \"POST\":\n        if \"add_assemblies\" in request.POST:\n            parent_type = request.POST[\"parent_type\"]\n            assemblies_name = request.POST[\"assemblies_name\"]\n            if parent_type == \"level1\":\n                Assemblies_Code_L1_Table.objects.create(",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "Contract_Management_pro",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def Contract_Management_pro(request):\n    company_details_record = request.user.company_details\n    my_contracts = MainContract.objects.filter(company_details=company_details_record)\n    data = []\n    for main_contract in my_contracts:\n        estimation_assemblies = Estimation_Assemblies_Table.objects.filter(\n            id__in=MainContractDetail.objects.filter(\n                main_contract=main_contract\n            ).values_list(\"assembly_row_id\", flat=True)\n        )",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "Contract_Management_main",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def Contract_Management_main(request):\n    company_details_record = request.user.company_details\n    # my_contracts = MainContract.objects.filter(company_details=company_details_record)\n    my_contracts = (\n        MainContract.objects.filter(company_details=company_details_record)\n        .order_by(\"-id\")\n        .prefetch_related(\n            \"details__assembly_row__Assemblies_Code_L1\",\n            \"details__assembly_row__Assemblies_Code_L2\",\n            \"details__assembly_row__Assemblies_Code_L3\",",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "contract_assembly_resource_details_management",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def contract_assembly_resource_details_management(request):\n    company_details_record = request.user.company_details\n    # my_contracts = MainContract.objects.filter(company_details=company_details_record)\n    my_contracts = (\n        MainContract.objects.filter(company_details=company_details_record)\n        .order_by(\"-id\")\n        .prefetch_related(\n            \"details__assembly_row__Assemblies_Code_L1\",\n            \"details__assembly_row__Assemblies_Code_L2\",\n            \"details__assembly_row__Assemblies_Code_L3\",",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "create_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def create_subcontract(request):\n    company_details_record = request.user.company_details\n    filter_Estimation_Assemblies_Table = Estimation_Assemblies_Table.objects.filter(\n        Company_Details=company_details_record\n    )\n    # Gather assemblies and resource totals\n    assemblies_data = []\n    for assembly in filter_Estimation_Assemblies_Table:\n        assemblies_data.append(\n            {",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "edit_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def edit_subcontract(request, subcontract_id):\n    main_subcontract = SubContractTable.objects.get(id=subcontract_id)\n    main_subcontract_details = SubContractDetail.objects.filter(\n        sub_contract=main_subcontract\n    )\n    company_details_record = request.user.company_details\n    filter_Estimation_Assemblies_Table = Estimation_Assemblies_Table.objects.filter(\n        Company_Details=company_details_record\n    )\n    # Gather assemblies and resource totals",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "save_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def save_subcontract(request):\n    if request.method == \"POST\":\n        print(\"subcontract\")\n        print(request.POST)\n        subcontract_name = request.POST.get(\"subcontract_name\")\n        comb_assem_code = request.POST.get(\"Comb_Assem_Code\")\n        hiddencontractInputId = request.POST.get(\"hiddencontractInputId\")\n        hiddenassemblyInputId = request.POST.get(\"hiddenassemblyInputId\")\n        item_description = request.POST.get(\"Item_Description\")\n        totalTotalPrice = request.POST.get(\"totalTotalPrice\")",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "save_edit_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def save_edit_subcontract(request):\n    if request.method == \"POST\":\n        print(\"subcontract\")\n        print(request.POST)\n        main_contract_id = request.POST.get(\"main_contract_id\")\n        subcontract_name = request.POST.get(\"subcontract_name\")\n        comb_assem_code = request.POST.get(\"Comb_Assem_Code\")\n        hiddencontractInputId = request.POST.get(\"hiddencontractInputId\")\n        hiddenassemblyInputId = request.POST.get(\"hiddenassemblyInputId\")\n        item_description = request.POST.get(\"Item_Description\")",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "delete_subcontract_row",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def delete_subcontract_row(request, row_id):\n    print(\"row_id\")\n    if request.method == \"DELETE\":\n        try:\n            d = 3\n            print(\"row_id\")\n            print(row_id)\n            # Fetch the row from the database\n            row = SubContractDetail.objects.get(id=row_id)\n            row.delete()  # Delete the row",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "subcontract_list",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def subcontract_list(request):\n    company_details_record = request.user.company_details\n    contracts = SubContractTable.objects.filter(\n        company_details=company_details_record\n    ).order_by(\"-id\")\n    return render(\n        request, \"contractApp/subcontract_list.html\", {\"contracts\": contracts}\n    )\ndef SubContract_Management(request):\n    company_details_record = request.user.company_details",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "SubContract_Management",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def SubContract_Management(request):\n    company_details_record = request.user.company_details\n    print(\"company_details_record\")\n    print(company_details_record)\n    if request.method == \"POST\":\n        if \"add_assemblies\" in request.POST:\n            parent_type = request.POST[\"parent_type\"]\n            assemblies_name = request.POST[\"assemblies_name\"]\n            if parent_type == \"level1\":\n                Assemblies_Code_L1_Table.objects.create(",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "SubContract_Management_main",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def SubContract_Management_main(request):\n    company_details_record = request.user.company_details\n    my_contracts = (\n        SubContractTable.objects.filter(company_details=company_details_record)\n        .order_by(\"-id\")\n        .prefetch_related(\n            \"details__assembly_value__Assemblies_Code_L1\",\n            \"details__assembly_value__Assemblies_Code_L2\",\n            \"details__assembly_value__Assemblies_Code_L3\",\n        )",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "subcontract_create_invoice",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def subcontract_create_invoice(request):\n    if request.method == \"POST\":\n        invoice_qty = []\n        contract_details_id = []\n        for key in request.POST:\n            if key.startswith(\"invoice_qty_\"):\n                invoice_qty.append(request.POST[key])\n            if key.startswith(\"contract_details_id_\"):\n                contract_details_id.append(request.POST[key])\n        contract_id = request.POST.get(\"contract_id\")",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "view_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def view_subcontract(request, subcontract_id):\n    # Fetch the contract using the contract ID, or return a 404 if not found\n    contract = get_object_or_404(SubContractTable, id=subcontract_id)\n    # Fetch the related MainContractDetail records\n    contract_details = SubContractDetail.objects.filter(sub_contract=contract)\n    filter_main_contract_invoice = SubContractInvoiceTable.objects.filter(\n        invoice_contract_row=contract\n    ).order_by(\"-id\")\n    context = {\n        \"contract\": contract,",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "delete_subcontract",
        "kind": 2,
        "importPath": "contractApp.views",
        "description": "contractApp.views",
        "peekOfCode": "def delete_subcontract(request, subcontract_id):\n    # Get the contract, or return a 404 if not found\n    contract = get_object_or_404(MainContract, id=contract_id)\n    # Check if the user is authorized to delete this contract (optional)\n    if contract.company_details.User != request.user:\n        return JsonResponse(\n            {\n                \"status\": \"error\",\n                \"message\": \"You do not have permission to delete this contract.\",\n            },",
        "detail": "contractApp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "expenseApp.migrations.0001_initial",
        "description": "expenseApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('assembliesApp', '0001_initial'),\n        ('companyApp', '0001_initial'),\n        ('contractApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExpenseTable',",
        "detail": "expenseApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ExpenseappConfig",
        "kind": 6,
        "importPath": "expenseApp.apps",
        "description": "expenseApp.apps",
        "peekOfCode": "class ExpenseappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'expenseApp'",
        "detail": "expenseApp.apps",
        "documentation": {}
    },
    {
        "label": "ExpenseTable",
        "kind": 6,
        "importPath": "expenseApp.models",
        "description": "expenseApp.models",
        "peekOfCode": "class ExpenseTable(models.Model):\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    comb_assem_code = models.CharField(max_length=255)\n    contract_value = models.ForeignKey('contractApp.MainContract', on_delete=models.CASCADE)\n    assembly_value = models.ForeignKey('assembliesApp.Estimation_Assemblies_Table', on_delete=models.CASCADE)\n    resource_value = models.ForeignKey('companyApp.CompanyResourcesTable', on_delete=models.CASCADE)\n    quantity = models.DecimalField(max_digits=12, decimal_places=2)\n    unit_cost = models.DecimalField(max_digits=12, decimal_places=2)\n    total_cost = models.DecimalField(max_digits=12, decimal_places=2)\n    Calculate_Manual_Unit_Cost = models.BooleanField(default=False)",
        "detail": "expenseApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "expenseApp.urls",
        "description": "expenseApp.urls",
        "peekOfCode": "urlpatterns = [\n    path('calculate-expenses/', views.calculate_expenses, name=\"calculate_expenses\"),\n    path('fetch_assemblies_by_contract/<int:contract_id>/', views.fetch_assemblies_by_contract, name='fetch_assemblies_by_contract'),\n    path('fetch_resorce_by_assemblies/<int:assembly_id>/', views.fetch_resorce_by_assemblies, name='fetch_resorce_by_assemblies'),\n    path('save-expense/', views.save_expense, name='save_expense'),\n    path(\"expenses/\", views.expense_list, name=\"expense_list\"),\n    path(\"expenses/delete/<int:pk>/\", views.delete_expense, name=\"delete_expense\"),\n    path(\"expenses/edit/<int:pk>/\", views.edit_expense, name=\"edit_expense\"),\n    path('save-expense-edit/', views.save_expense_edit, name='save_expense_edit'),\n    path('expenses_management/', views.expenses_management, name=\"expenses_management\"),",
        "detail": "expenseApp.urls",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "class DateTimeEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n# @login_required\n# def calculate_expenses(request):\n#     company_details_record = request.user.company_details\n#     filter_users_Resource_Code_L3 = Resource_Code_L3_Table.objects.filter(Company_Details=company_details_record)\n#     # Filter resources ",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "class DateTimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            return obj.isoformat()\n        return super(DateTimeEncoder, self).default(obj)\n@login_required\ndef calculate_expenses(request):\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "calculate_expenses",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def calculate_expenses(request):\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)\n    filter_MainContract_list = list(filter_MainContract_query.values('id', 'contract_name'))\n    filter_MainContract_json = json.dumps(filter_MainContract_list, cls=DateTimeEncoder)\n    # Filter resources \n    filter_resources_query = CompanyResourcesTable.objects.filter(Company_Details=company_details_record).select_related('Resource_Code_L3')\n    filter_resources_list = list(filter_resources_query.values('id', 'Unit_of_Measure', 'Resource_Code_L1__Resource_Code_L1', 'Resource_Code_L2__Resource_Code_L2', 'Resource_Code_L3__Resource_Code_L3', 'Resource_Name', 'Budget_Unit_Cost'))\n    filter_resources_json = json.dumps(filter_resources_list, cls=DateTimeEncoder)",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "fetch_assemblies_by_contract",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def fetch_assemblies_by_contract(request, contract_id):\n    print(f'Getting assemblies for Contract ID: {contract_id}')\n    company_details_record = request.user.company_details\n    if not company_details_record:\n        return JsonResponse({'error': 'Company details not found'}, status=404)\n    get_contract = MainContract.objects.get(id=contract_id)\n    get_contract_assemblies = MainContractDetail.objects.filter(main_contract=get_contract).select_related('assembly_row').values(\n        'assembly_row__id',\n        'assembly_row__Assembly_Title',\n        'assembly_row__Assembly_Name',",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "fetch_resorce_by_assemblies",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def fetch_resorce_by_assemblies(request, assembly_id):\n    print(f'Getting resoures for assembly ID: {assembly_id}')\n    company_details_record = request.user.company_details\n    if not company_details_record:\n        return JsonResponse({'error': 'Company details not found'}, status=404)\n    get_assembly = Estimation_Assemblies_Table.objects.get(id=assembly_id)\n    get_assembly_resources = Estimation_Assemblies_Resource_Details_Table.objects.filter(Estimation_Assemblies=get_assembly).select_related('Resource_record').values(\n        'Resource_record__id',\n        'Resource_record__Resource_Title',\n        'Resource_record__Resource_Name',",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "save_expense",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def save_expense(request):\n    print(\"saving expense ...\")\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        try:\n            # print(request.body)\n            # data = json.loads(request.body)\n            # print(data)\n            # combAssemCode = data['combAssemCode']\n            # contractValue= data['contractValue']",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "expense_list",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def expense_list(request):\n    company_details_record = request.user.company_details\n    expenses = ExpenseTable.objects.filter(Company_Details=company_details_record).order_by('-id')\n    return render(request, \"expenseApp/expense_list.html\", {\"expenses\": expenses})\n# Edit an Expense\n@login_required\ndef edit_expense(request, pk):\n    expense = get_object_or_404(ExpenseTable, pk=pk)\n    company_details_record = request.user.company_details\n    # Filter main contract ",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "edit_expense",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def edit_expense(request, pk):\n    expense = get_object_or_404(ExpenseTable, pk=pk)\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)\n    filter_MainContract_list = list(filter_MainContract_query.values('id', 'contract_name'))\n    filter_MainContract_json = json.dumps(filter_MainContract_list, cls=DateTimeEncoder)\n    # Filter resources \n    filter_resources_query = CompanyResourcesTable.objects.filter(Company_Details=company_details_record).select_related('Resource_Code_L3')\n    filter_resources_list = list(filter_resources_query.values('id', 'Unit_of_Measure', 'Resource_Code_L1__Resource_Code_L1', 'Resource_Code_L2__Resource_Code_L2', 'Resource_Code_L3__Resource_Code_L3', 'Resource_Name', 'Budget_Unit_Cost'))",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "save_expense_edit",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def save_expense_edit(request):\n    print(\"saving expense ...\")\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        try:\n            expense_id = request.POST.get('expense_id')\n            comb_assem_code = request.POST.get('combAssemCode')\n            contract_value = request.POST.get('contractValue')\n            assembly_value = request.POST.get('assemblyValue')\n            resource_value = request.POST.get('resourceValue')",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "delete_expense",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def delete_expense(request, pk):\n    expense = get_object_or_404(ExpenseTable, pk=pk)\n    if request.method == \"POST\":\n        expense.delete()\n        return redirect(\"expense_list\")\n    return render(request, \"expenseApp/delete_expense.html\", {\"expense\": expense})\n@login_required\ndef expenses_management(request):\n    company_details_record = request.user.company_details\n    level1_resources = Resource_Code_L1_Table.objects.filter(Company_Details=company_details_record)",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "expenses_management",
        "kind": 2,
        "importPath": "expenseApp.views",
        "description": "expenseApp.views",
        "peekOfCode": "def expenses_management(request):\n    company_details_record = request.user.company_details\n    level1_resources = Resource_Code_L1_Table.objects.filter(Company_Details=company_details_record)\n    data = []\n    for level1 in level1_resources:\n        level2_resources = Resource_Code_L2_Table.objects.filter(Resource_Code_L1=level1)\n        level1_data = {\n            'level1': level1,\n            'level2': []\n        }",
        "detail": "expenseApp.views",
        "documentation": {}
    },
    {
        "label": "MainappConfig",
        "kind": 6,
        "importPath": "mainApp.apps",
        "description": "mainApp.apps",
        "peekOfCode": "class MainappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mainApp'",
        "detail": "mainApp.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mainApp.urls",
        "description": "mainApp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name=\"index\"),\n    path('dashboard/', views.dashboard, name=\"dashboard\"),\n    path('account-settings/', views.account_settings, name=\"account_settings\"),\n    path('account_settings_notification/', views.account_settings_notification, name=\"account_settings_notification\"),\n    path('account_settings_connections/', views.account_settings_connections, name=\"account_settings_connections\"),\n]",
        "detail": "mainApp.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "def index(request):\n    return redirect('dashboard')\n@login_required\ndef dashboard(request):\n    # Calculate total company revenue and total actual costs\n    total_revenue = 0\n    total_actual_costs = 0\n    contracts = MainContract.objects.filter(company_details = request.user.company_details)\n    for contract in contracts:\n        total_revenue += contract.func_mainContract_total_Invoices_total_revenue()",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "def dashboard(request):\n    # Calculate total company revenue and total actual costs\n    total_revenue = 0\n    total_actual_costs = 0\n    contracts = MainContract.objects.filter(company_details = request.user.company_details)\n    for contract in contracts:\n        total_revenue += contract.func_mainContract_total_Invoices_total_revenue()\n        total_actual_costs += contract.calculate_total_actual_cost()\n    # Create a bar chart\n    labels = ['Total Company Revenue', 'Total Actual Costs']",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "account_settings",
        "kind": 2,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "def account_settings(request):\n    return render(request, \"account_settings.html\")\n@login_required\ndef account_settings_notification(request):\n    return render(request, \"account_settings_notification.html\")\n@login_required\ndef account_settings_connections(request):\n    return render(request, \"account_settings_connections.html\")",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "account_settings_notification",
        "kind": 2,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "def account_settings_notification(request):\n    return render(request, \"account_settings_notification.html\")\n@login_required\ndef account_settings_connections(request):\n    return render(request, \"account_settings_connections.html\")",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "account_settings_connections",
        "kind": 2,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "def account_settings_connections(request):\n    return render(request, \"account_settings_connections.html\")",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-#^)h$t5aqbdl=o%8amx7mp-93iqw7#aze(tz2v=l&l0i2vprtb'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-#^)h$t5aqbdl=o%8amx7mp-93iqw7#aze(tz2v=l&l0i2vprtb'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # local Apps",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # local Apps\n    'mainApp',\n    'companyApp',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project.urls'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n# srtatic settings\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n# srtatic settings\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n# srtatic settings\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n# srtatic settings\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# for image upload",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# for image upload\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\nMEDIA_URL='/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory where static files will be collected\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# for image upload\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\nMEDIA_URL='/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# for image upload\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\nMEDIA_URL='/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/authentication/login/'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR,'media')\nMEDIA_URL='/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/authentication/login/'\nLOGIN_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'authenticationApp.User'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/authentication/login/'\nLOGIN_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'authenticationApp.User'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_URL = '/authentication/login/'\nLOGIN_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'authenticationApp.User'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'authenticationApp.User'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'authenticationApp.User'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "admin.site.site_header = \"Value System\"\nadmin.site.site_title = \"Value System Admin Panel\"\nadmin.site.index_title = \"Value System Admin Panel\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mainApp.urls')),\n    path('', include('companyApp.urls')),\n    path('', include('assembliesApp.urls')),\n    path('', include('contractApp.urls')),\n    path('', include('expenseApp.urls')),",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "admin.site.site_title = \"Value System Admin Panel\"\nadmin.site.index_title = \"Value System Admin Panel\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mainApp.urls')),\n    path('', include('companyApp.urls')),\n    path('', include('assembliesApp.urls')),\n    path('', include('contractApp.urls')),\n    path('', include('expenseApp.urls')),\n    path('', include('storeApp.urls')),",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "admin.site.index_title = \"Value System Admin Panel\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mainApp.urls')),\n    path('', include('companyApp.urls')),\n    path('', include('assembliesApp.urls')),\n    path('', include('contractApp.urls')),\n    path('', include('expenseApp.urls')),\n    path('', include('storeApp.urls')),\n    path('authentication/', include('authenticationApp.urls')),",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('mainApp.urls')),\n    path('', include('companyApp.urls')),\n    path('', include('assembliesApp.urls')),\n    path('', include('contractApp.urls')),\n    path('', include('expenseApp.urls')),\n    path('', include('storeApp.urls')),\n    path('authentication/', include('authenticationApp.urls')),\n]",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeApp.migrations.0001_initial",
        "description": "storeApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('assembliesApp', '0001_initial'),\n        ('companyApp', '0001_initial'),\n        ('contractApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StoreTable',",
        "detail": "storeApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StoreappConfig",
        "kind": 6,
        "importPath": "storeApp.apps",
        "description": "storeApp.apps",
        "peekOfCode": "class StoreappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'storeApp'",
        "detail": "storeApp.apps",
        "documentation": {}
    },
    {
        "label": "StoreTable",
        "kind": 6,
        "importPath": "storeApp.models",
        "description": "storeApp.models",
        "peekOfCode": "class StoreTable(models.Model):\n    Company_Details = models.ForeignKey(CompanyDetailsTable, on_delete=models.CASCADE, null=True, blank=True)\n    comb_assem_code = models.CharField(max_length=255)\n    stock_trasaction_status_options = (\n        ('', ''),\n        ('Stock-In', 'Stock-In'),\n        ('Stock-Out', 'Stock-Out')\n    )\n    stock_trasaction_status = models.CharField(max_length=255, choices=stock_trasaction_status_options, default='')\n    contract_value = models.ForeignKey('contractApp.MainContract', on_delete=models.CASCADE)",
        "detail": "storeApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "storeApp.urls",
        "description": "storeApp.urls",
        "peekOfCode": "urlpatterns = [\n    path('calculate-stores/', views.calculate_stores, name=\"calculate_stores\"),\n    path('fetch_assemblies_by_contract/<int:contract_id>/', views.fetch_assemblies_by_contract, name='fetch_assemblies_by_contract'),\n    path('store_fetch_resorce_by_assemblies/<int:assembly_id>/', views.fetch_resorce_by_assemblies, name='fetch_resorce_by_assemblies'),\n    path('save-store/', views.save_store, name='save_store'),\n    path(\"stores/\", views.store_list, name=\"store_list\"),\n    path(\"stores/delete/<int:pk>/\", views.delete_store, name=\"delete_store\"),\n    path(\"stores/edit/<int:pk>/\", views.edit_store, name=\"edit_store\"),\n    path('save-edit-store/', views.save_edit_store, name='save_edit_store'),\n    path(\"stock_in_list/\", views.stock_in_list, name=\"stock_in_list\"),",
        "detail": "storeApp.urls",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "class DateTimeEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n# @login_required\n# def calculate_store(request):\n#     company_details_record = request.user.company_details\n#     filter_users_Resource_Code_L3 = Resource_Code_L3_Table.objects.filter(Company_Details=company_details_record)\n#     # Filter resources ",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "DateTimeEncoder",
        "kind": 6,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "class DateTimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            return obj.isoformat()\n        return super(DateTimeEncoder, self).default(obj)\n@login_required\ndef calculate_stores(request):\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "calculate_stores",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def calculate_stores(request):\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)\n    filter_MainContract_list = list(filter_MainContract_query.values('id', 'contract_name'))\n    filter_MainContract_json = json.dumps(filter_MainContract_list, cls=DateTimeEncoder)\n    # Filter resources \n    filter_resources_query = CompanyResourcesTable.objects.filter(Company_Details=company_details_record).select_related('Resource_Code_L3')\n    filter_resources_list = list(filter_resources_query.values('id', 'Unit_of_Measure', 'Resource_Code_L1__Resource_Code_L1', 'Resource_Code_L2__Resource_Code_L2', 'Resource_Code_L3__Resource_Code_L3', 'Resource_Name', 'Budget_Unit_Cost'))\n    filter_resources_json = json.dumps(filter_resources_list, cls=DateTimeEncoder)",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "fetch_assemblies_by_contract",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def fetch_assemblies_by_contract(request, contract_id):\n    print(f'Getting assemblies for Contract ID: {contract_id}')\n    company_details_record = request.user.company_details\n    if not company_details_record:\n        return JsonResponse({'error': 'Company details not found'}, status=404)\n    get_contract = MainContract.objects.get(id=contract_id)\n    get_contract_assemblies = MainContractDetail.objects.filter(main_contract=get_contract).select_related('assembly_row').values(\n        'assembly_row__id',\n        'assembly_row__Assembly_Name',\n        'assembly_row__Unit_of_Measure',",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "fetch_resorce_by_assemblies",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def fetch_resorce_by_assemblies(request, assembly_id):\n    print('--------------------------------------------------------')\n    print(f'Getting resources for assembly ID: {assembly_id}')\n    company_details_record = request.user.company_details\n    if not company_details_record:\n        return JsonResponse({'error': 'Company details not found'}, status=404)\n    get_assembly = Estimation_Assemblies_Table.objects.get(id=assembly_id)\n    # Get the resources for the assembly\n    get_assembly_resources = Estimation_Assemblies_Resource_Details_Table.objects.filter(\n        Estimation_Assemblies=get_assembly",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "save_store",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def save_store(request):\n    print(\"saving store ...\")\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        try:\n            # print(request.body)\n            # data = json.loads(request.body)\n            # print(data)\n            # combAssemCode = data['combAssemCode']\n            # contractValue= data['contractValue']",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "store_list",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def store_list(request):\n    company_details_record = request.user.company_details\n    stores = StoreTable.objects.filter(Company_Details=company_details_record).order_by('-id')\n    print(stores)\n    return render(request, \"storeApp/store_list.html\", {\"stores\": stores})\n# Read/ List stores\n@login_required\ndef stock_in_list(request):\n    company_details_record = request.user.company_details\n    stores = StoreTable.objects.filter(Company_Details=company_details_record, stock_trasaction_status=\"Stock-In\").order_by('-id')",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "stock_in_list",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def stock_in_list(request):\n    company_details_record = request.user.company_details\n    stores = StoreTable.objects.filter(Company_Details=company_details_record, stock_trasaction_status=\"Stock-In\").order_by('-id')\n    print(stores)\n    return render(request, \"storeApp/stock_in_list.html\", {\"stores\": stores})\n# Read/ List stores\n@login_required\ndef stock_out_list(request):\n    company_details_record = request.user.company_details\n    stores = StoreTable.objects.filter(Company_Details=company_details_record, stock_trasaction_status=\"Stock-Out\").order_by('-id')",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "stock_out_list",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def stock_out_list(request):\n    company_details_record = request.user.company_details\n    stores = StoreTable.objects.filter(Company_Details=company_details_record, stock_trasaction_status=\"Stock-Out\").order_by('-id')\n    print(stores)\n    return render(request, \"storeApp/stock_out_list.html\", {\"stores\": stores})\n# Delete an store\n@login_required\ndef delete_store(request, pk):\n    store = get_object_or_404(StoreTable, pk=pk)\n    if request.method == \"POST\":",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "delete_store",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def delete_store(request, pk):\n    store = get_object_or_404(StoreTable, pk=pk)\n    if request.method == \"POST\":\n        store.delete()\n        return redirect(\"store_list\")\n    return render(request, \"storeApp/delete_store.html\", {\"store\": store})\n# Delete an store\n@login_required\ndef edit_store(request, pk):\n    store = get_object_or_404(StoreTable, pk=pk)",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "edit_store",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def edit_store(request, pk):\n    store = get_object_or_404(StoreTable, pk=pk)\n    company_details_record = request.user.company_details\n    # Filter main contract \n    filter_MainContract_query = MainContract.objects.filter(company_details=company_details_record)\n    filter_MainContract_list = list(filter_MainContract_query.values('id', 'contract_name'))\n    filter_MainContract_json = json.dumps(filter_MainContract_list, cls=DateTimeEncoder)\n    # Filter resources \n    filter_resources_query = CompanyResourcesTable.objects.filter(Company_Details=company_details_record).select_related('Resource_Code_L3')\n    filter_resources_list = list(filter_resources_query.values('id', 'Unit_of_Measure', 'Resource_Code_L1__Resource_Code_L1', 'Resource_Code_L2__Resource_Code_L2', 'Resource_Code_L3__Resource_Code_L3', 'Resource_Name', 'Budget_Unit_Cost'))",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "save_edit_store",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def save_edit_store(request):\n    print(\"saving store ...\")\n    company_details_record = request.user.company_details\n    if request.method == 'POST':\n        try:\n            store_id = request.POST.get('store_id')\n            comb_assem_code = request.POST.get('combAssemCode')\n            stock_trasaction_status  = request.POST.get('stock_trasaction_status')\n            contract_value = request.POST.get('contractValue')\n            assembly_value = request.POST.get('assemblyValue')",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "store_management",
        "kind": 2,
        "importPath": "storeApp.views",
        "description": "storeApp.views",
        "peekOfCode": "def store_management(request):\n    company_details_record = request.user.company_details\n    level1_resources = Resource_Code_L1_Table.objects.filter(Company_Details=company_details_record)\n    data = []\n    for level1 in level1_resources:\n        level2_resources = Resource_Code_L2_Table.objects.filter(Resource_Code_L1=level1)\n        level1_data = {\n            'level1': level1,\n            'level2': []\n        }",
        "detail": "storeApp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]